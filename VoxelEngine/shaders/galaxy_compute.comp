#version 450
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct Star {
    vec3 position;
    vec3 velocity;
};

struct EllipseParams {
    float majorAxis;
    float minorAxis;
    float tiltAngle;
};

layout(push_constant) uniform PushConstants {
    int numStars;
    int numEllipses;
    float deltaTime;
} push;

layout(std430, binding = 0) readonly buffer StarBufferIn {
    Star starsIn[];
};

layout(std430, binding = 1) writeonly buffer StarBufferOut {
    Star starsOut[];
};

layout(std430, binding = 2) readonly buffer EllipseBuffer {
    EllipseParams ellipses[30];
} ellipseData;

vec2 calculateEllipsePoint(float t, EllipseParams params) {
    float x = params.majorAxis * cos(t) * cos(params.tiltAngle) -
            params.minorAxis * sin(t) * sin(params.tiltAngle);
    float y = params.majorAxis * cos(t) * sin(params.tiltAngle) +
            params.minorAxis * sin(t) * cos(params.tiltAngle);
    return vec2(x, y);
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= push.numStars) {
        return;
    }

    // Calculate which ellipse this star belongs to
    int starsPerEllipse = push.numStars / push.numEllipses;
    int ellipseIndex = int(index) / starsPerEllipse;
    ellipseIndex = min(ellipseIndex, push.numEllipses - 1);

    // Calculate the star's position within its ellipse
    float localIndex = float(index - (ellipseIndex * starsPerEllipse));
    int totalStarsInEllipse = (ellipseIndex == push.numEllipses - 1)
        ? push.numStars - (starsPerEllipse * (push.numEllipses - 1)) : starsPerEllipse;

    float t = localIndex * (2.0 * 3.14159) / float(totalStarsInEllipse);
    vec2 point = calculateEllipsePoint(t, ellipseData.ellipses[ellipseIndex]);

    // Copy the existing star data but update the position
    starsOut[index] = starsIn[index];
    starsOut[index].position = vec3(point.x, 0.0, point.y);
}
