#version 450
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct Star {
    vec3 position;
    vec3 velocity;
};

struct EllipseParams {
    float majorAxis;
    float minorAxis;
    float tiltAngle;
};

layout(push_constant) uniform PushConstants {
    int numStars;
    int numEllipses;
    float deltaTime;
} push;

layout(std430, binding = 0) readonly buffer StarBufferIn {
    Star starsIn[];
};

layout(std430, binding = 1) writeonly buffer StarBufferOut {
    Star starsOut[];
};

layout(std430, binding = 2) readonly buffer EllipseBuffer {
    EllipseParams ellipses[30];
} ellipseData;

const float BASE_ROTATION_SPEED = -0.05;
const float SPEED_MULTIPLIER = 2.0;

vec2 calculateEllipsePoint(float t, EllipseParams params) {
    float x = params.majorAxis * cos(t) * cos(params.tiltAngle) -
            params.minorAxis * sin(t) * sin(params.tiltAngle);
    float y = params.majorAxis * cos(t) * sin(params.tiltAngle) +
            params.minorAxis * sin(t) * cos(params.tiltAngle);
    return vec2(x, y);
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= push.numStars) {
        return;
    }

    int starsPerEllipse = push.numStars / push.numEllipses;
    int ellipseIndex = int(index) / starsPerEllipse;
    ellipseIndex = min(ellipseIndex, push.numEllipses - 1);

    EllipseParams params = ellipseData.ellipses[ellipseIndex];

    // Get the stored parameters
    float currentAngle = starsIn[index].velocity.x;
    float offsetX = starsIn[index].velocity.y;
    float offsetY = starsIn[index].velocity.z;
    float offsetZ = 0.0; // We'll read this from velocity.z
    if (starsIn[index].velocity.length() >= 4.0) {
        offsetZ = starsIn[index].velocity.z;
    }

    // Calculate rotation speed based on ellipse size
    float speedFactor = SPEED_MULTIPLIER / max(params.majorAxis, 0.1);
    float rotationSpeed = BASE_ROTATION_SPEED * speedFactor;

    // Update angle
    float newAngle = currentAngle + rotationSpeed * push.deltaTime;
    if (newAngle > 2.0 * 3.14159) {
        newAngle -= 2.0 * 3.14159;
    }

    // Calculate base position on ellipse
    vec2 basePoint = calculateEllipsePoint(newAngle, params);

    // Apply the stored offset to maintain consistent randomization
    vec3 newPosition = vec3(basePoint.x + offsetX, offsetY, basePoint.y + offsetZ);

    // Store updated position and parameters
    starsOut[index].position = newPosition;
    starsOut[index].velocity = vec3(newAngle, offsetX, offsetY);
}
