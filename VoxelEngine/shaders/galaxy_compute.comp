#version 450

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct Star {
    vec3 position;
    vec3 velocity;
};

layout(push_constant) uniform Push {
    float deltaTime;
    float totalTime;
    int numStars;
} push;

layout(std430, binding = 0) readonly buffer StarBufferIn {
    Star starsIn[];
};

layout(std430, binding = 1) buffer StarBufferOut {
    Star starsOut[];
};

const float PI = 3.14159265359;

void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index >= push.numStars) {
        return;
    }

    // Each star gets a unique phase offset based on its index
    float phaseOffset = (float(index) / float(push.numStars)) * 2.0 * PI;

    // Use a fixed rotation speed
    const float ROTATION_SPEED = 0.2; // Adjust this to control speed

    // Calculate the current angle including phase offset
    float currentAngle = (push.totalTime * ROTATION_SPEED) + phaseOffset;

    // Calculate position on circle
    const float radius = 2.0; // Fixed radius for all stars
    vec3 newPosition = vec3(
            radius * cos(currentAngle),
            0.0, // Keep all stars in XZ plane
            radius * sin(currentAngle)
        );

    // Calculate tangential velocity
    vec3 newVelocity = vec3(
            -radius * sin(currentAngle) * ROTATION_SPEED,
            0.0,
            radius * cos(currentAngle) * ROTATION_SPEED
        );

    // Write output
    starsOut[index].position = newPosition;
    starsOut[index].velocity = newVelocity;
}
