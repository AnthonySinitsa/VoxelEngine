#version 450
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct Star {
    vec3 position;
    vec3 velocity; // We'll use velocity.x to store the current angle
};

struct EllipseParams {
    float majorAxis;
    float minorAxis;
    float tiltAngle;
};

layout(push_constant) uniform PushConstants {
    int numStars;
    int numEllipses;
    float deltaTime;
} push;

layout(std430, binding = 0) readonly buffer StarBufferIn {
    Star starsIn[];
};

layout(std430, binding = 1) writeonly buffer StarBufferOut {
    Star starsOut[];
};

layout(std430, binding = 2) readonly buffer EllipseBuffer {
    EllipseParams ellipses[25];
} ellipseData;

const float ROTATION_SPEED = 0.005; // Radians per second

vec2 calculateEllipsePoint(float t, EllipseParams params) {
    float x = params.majorAxis * cos(t) * cos(params.tiltAngle) -
            params.minorAxis * sin(t) * sin(params.tiltAngle);
    float y = params.majorAxis * cos(t) * sin(params.tiltAngle) +
            params.minorAxis * sin(t) * cos(params.tiltAngle);
    return vec2(x, y);
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= push.numStars) {
        return;
    }

    // Calculate which ellipse this star belongs to
    int starsPerEllipse = push.numStars / push.numEllipses;
    int ellipseIndex = int(index) / starsPerEllipse;
    ellipseIndex = min(ellipseIndex, push.numEllipses - 1);

    // Get the star's current angle from its velocity.x component
    float currentAngle = starsIn[index].velocity.x;

    // Update the angle based on deltaTime
    float speed = ROTATION_SPEED * (1.0 + float(push.numEllipses - ellipseIndex) * 0.2); // Make inner ellipses faster
    float newAngle = currentAngle + speed * push.deltaTime;

    // Wrap angle between 0 and 2Ï€
    if (newAngle > 2.0 * 3.14159) {
        newAngle -= 2.0 * 3.14159;
    }

    // Calculate new position using the same ellipse equation
    vec2 newPoint = calculateEllipsePoint(newAngle, ellipseData.ellipses[ellipseIndex]);

    // Update star data
    starsOut[index].position = vec3(newPoint.x, 0.0, newPoint.y);
    starsOut[index].velocity = vec3(newAngle, 0.0, 0.0); // Store new angle in velocity.x
}
