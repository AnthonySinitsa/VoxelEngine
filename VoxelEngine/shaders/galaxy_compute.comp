#version 450
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct Star {
    vec3 position;
    vec3 velocity;
};

struct EllipseParams {
    float majorAxis;
    float minorAxis;
    float tiltAngle;
};

layout(push_constant) uniform PushConstants {
    int numStars;
    float deltaTime;
    EllipseParams innerEllipse;
    EllipseParams outerEllipse;
} push;

layout(std430, binding = 0) readonly buffer StarBufferIn {
    Star starsIn[];
};

layout(std430, binding = 1) writeonly buffer StarBufferOut {
    Star starsOut[];
};

vec2 calculateEllipsePoint(float t, EllipseParams params) {
    float x = params.majorAxis * cos(t) * cos(params.tiltAngle) -
            params.minorAxis * sin(t) * sin(params.tiltAngle);

    float y = params.majorAxis * cos(t) * sin(params.tiltAngle) +
            params.minorAxis * sin(t) * cos(params.tiltAngle);

    return vec2(x, y);
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= push.numStars) {
        return;
    }

    // Determine which ellipse to use based on star index
    bool isInnerEllipse = index < push.numStars / 2;

    // Calculate angle parameter t based on star index
    float numStarsInEllipse = float(push.numStars) / 2.0;
    float t = (isInnerEllipse ? float(index) : float(index - push.numStars / 2))
            * (2.0 * 3.14159) / numStarsInEllipse;

    // Get ellipse point
    vec2 point = calculateEllipsePoint(t,
            isInnerEllipse ? push.innerEllipse : push.outerEllipse);

    // Update position
    starsOut[index].position = vec3(point.x, 0.0, point.y);
    starsOut[index].velocity = vec3(0.0); // You might want to calculate appropriate velocities
}
