#version 450

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct Star {
    vec3 position;
    vec3 velocity;
};

layout(push_constant) uniform Push {
    float deltaTime;
    float totalTime;
    int numStars;
} push;

layout(std430, binding = 0) readonly buffer StarBufferIn {
    Star starsIn[];
};

layout(std430, binding = 1) buffer StarBufferOut {
    Star starsOut[];
};

void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index >= push.numStars) {
        return;
    }

    Star starIn = starsIn[index];
    Star starOut;

    // Get current position and normalize it to get direction from center
    vec3 position = starIn.position;
    float radius = length(position.xz); // Get distance from center

    // Calculate angular velocity (rotation speed)
    float angularSpeed = 0.005; // Adjust this value to change rotation speed

    // Calculate new position using rotation matrix
    float angle = angularSpeed * push.deltaTime;
    float cosAngle = cos(angle);
    float sinAngle = sin(angle);

    // Rotate position around Y axis
    starOut.position = vec3(
            position.x * cosAngle - position.z * sinAngle,
            position.y,
            position.x * sinAngle + position.z * cosAngle
        );

    // Calculate tangential velocity
    vec3 toCenter = normalize(vec3(-position.z, 0.0, position.x));
    starOut.velocity = toCenter * angularSpeed * radius;

    starsOut[index] = starOut;
}
